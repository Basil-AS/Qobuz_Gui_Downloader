"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å Qobuz
"""
import os
import re
import string
import requests
import logging
from pathlib import Path
from typing import Dict, Callable, Optional
from core.metadata import MetadataWriter
from core.lyrics_search import LyricsSearcher


logger = logging.getLogger(__name__)


class PartialFormatter(string.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, missing="", bad_fmt=""):
        self.missing, self.bad_fmt = missing, bad_fmt
    
    def get_field(self, field_name, args, kwargs):
        try:
            val = super().get_field(field_name, args, kwargs)
        except (KeyError, AttributeError):
            val = None, field_name
        return val
    
    def format_field(self, value, spec):
        if not value:
            return self.missing
        try:
            return super().format_field(value, spec)
        except ValueError:
            if self.bad_fmt:
                return self.bad_fmt
            raise


def sanitize_filename(filename: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Windows
    invalid_chars = r'<>:"/\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    # –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ (Windows –Ω–µ –ª—é–±–∏—Ç)
    filename = filename.rstrip('.')
    return filename


def get_url_info(url: str):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ ID –∏–∑ URL Qobuz.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç URL —Å–æ —Å–∫–æ–±–∫–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    https://www.qobuz.com/us-en/album/song-title-(remastered)/abc123def
    """
    r = re.search(
        r"(?:https?:\/\/(?:w{3}|open|play)\.qobuz\.com)?(?:\/[a-z]{2}-[a-z]{2})"
        r"?\/(album|artist|track|playlist|label)(?:\/[-\w\d\s.,'%()]+)?\/([\w\d]+)",
        url,
    )
    if r:
        return r.groups()
    return None, None


class QobuzDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Qobuz"""
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ format_id
    QUALITY_MAP = {
        0: 5,   # MP3 320
        1: 6,   # FLAC 16/44.1
        2: 7,   # FLAC 24/96
        3: 27,  # FLAC 24/192
    }
    
    def __init__(self, qobuz_client, settings: Dict, 
                 progress_callback: Callable = None,
                 log_callback: Callable = None):
        """
        Args:
            qobuz_client: –∫–ª–∏–µ–Ω—Ç Qobuz API
            settings: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            progress_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            log_callback: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.client = qobuz_client
        self.settings = settings
        self.progress_callback = progress_callback
        self.log_callback = log_callback
        self._download_thread = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—É–∑—ã
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.log(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        self.log(f"  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å LRC: {self.settings.get('lyrics_save_lrc', True)}")
        self.log(f"  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å SRT: {self.settings.get('lyrics_save_srt', False)}")
        self.log(f"  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å TXT: {self.settings.get('lyrics_save_txt', False)}")
        
        self.metadata_writer = MetadataWriter(settings)
        self.lyrics_searcher = LyricsSearcher()
        self.formatter = PartialFormatter()
        
        self.session = requests.Session()
    
    def check_pause(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        import time
        if self._download_thread and hasattr(self._download_thread, '_is_paused'):
            while self._download_thread._is_paused and self._download_thread._is_running:
                time.sleep(0.1)
            # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∏–ª–∏ - –≤—ã—Ö–æ–¥–∏–º
            if not self._download_thread._is_running:
                raise InterruptedError("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    def log(self, message: str):
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        logger.info(message)
        if self.log_callback:
            self.log_callback(message)
    
    def update_progress(self, value: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.progress_callback:
            self.progress_callback(value)
    
    def create_m3u_playlist(self, folder: Path, track_files: list, playlist_name: str = "playlist"):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ M3U –ø–ª–µ–π–ª–∏—Å—Ç–∞
        
        Args:
            folder: –ø–∞–ø–∫–∞ –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç—Ä–µ–∫–∏
            track_files: —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–∫–æ–≤
            playlist_name: –∏–º—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        """
        if not self.settings.get('create_playlist', False):
            return
        
        try:
            m3u_path = folder / f"{sanitize_filename(playlist_name)}.m3u"
            
            with open(m3u_path, 'w', encoding='utf-8') as f:
                f.write("#EXTM3U\n")
                for track_file in track_files:
                    if track_file.exists():
                        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                        f.write(f"{track_file.name}\n")
            
            self.log(f"üìù M3U –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {m3u_path.name}")
        except Exception as e:
            self.log(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å M3U –ø–ª–µ–π–ª–∏—Å—Ç: {e}")
    
    def download_url(self, url: str) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ URL
        
        Args:
            url: URL —Ç—Ä–µ–∫–∞/–∞–ª—å–±–æ–º–∞/–ø–ª–µ–π–ª–∏—Å—Ç–∞ Qobuz
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url_type, url_id = get_url_info(url)
            
            if not url_type or not url_id:
                self.log("‚úó –ù–µ–≤–µ—Ä–Ω—ã–π URL Qobuz")
                return False
            
            self.log(f"üì• –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: {url_type}, ID: {url_id}")
            
            if url_type == "track":
                return self.download_track_by_id(url_id)
            elif url_type == "album":
                return self.download_album(url_id)
            elif url_type == "artist":
                return self.download_artist(url_id)
            elif url_type == "playlist":
                return self.download_playlist(url_id)
            else:
                self.log(f"‚úó –¢–∏–ø {url_type} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                return False
                
        except Exception as e:
            self.log(f"‚úó –û—à–∏–±–∫–∞: {str(e)}")
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
            return False
    
    def download_album(self, album_id: str) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞"""
        try:
            self.log(f"üìÄ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª—å–±–æ–º–µ...")
            album_meta = self.client.get_album_meta(album_id)
            
            album_title = album_meta['title']
            artist_name = album_meta['artist']['name']
            tracks_count = len(album_meta['tracks']['items'])
            
            self.log(f"üìÄ –ê–ª—å–±–æ–º: {artist_name} - {album_title}")
            self.log(f"üìÄ –¢—Ä–µ–∫–æ–≤: {tracks_count}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–ª—å–±–æ–º–∞
            album_folder = self.get_album_folder(album_meta)
            album_folder.mkdir(parents=True, exist_ok=True)
            self.log(f"üìÅ –ü–∞–ø–∫–∞: {album_folder}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É
            cover_data = None
            if self.settings.get('download_cover', True):
                cover_data = self.download_cover(album_meta.get('image', {}).get('large'))
                if cover_data:
                    cover_path = album_folder / "cover.jpg"
                    cover_path.write_bytes(cover_data)
                    self.log("‚úì –û–±–ª–æ–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏
            downloaded_files = []
            for idx, track in enumerate(album_meta['tracks']['items'], 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É/–æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç—Ä–µ–∫–æ–º
                self.check_pause()
                
                self.log(f"\nüéµ [{idx}/{tracks_count}] {track.get('title', 'Unknown')}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int((idx - 1) / tracks_count * 100)
                self.update_progress(progress)
                
                track_file = self.download_track(track, album_folder, album_meta, cover_data)
                if track_file:
                    downloaded_files.append(track_file)
            
            # –°–æ–∑–¥–∞—ë–º M3U –ø–ª–µ–π–ª–∏—Å—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if downloaded_files:
                self.create_m3u_playlist(
                    album_folder, 
                    downloaded_files, 
                    f"{artist_name} - {album_title}"
                )
            
            self.update_progress(100)
            self.log(f"\n‚úì –ê–ª—å–±–æ–º —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            self.log(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞: {str(e)}")
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞")
            return False
    
    def download_track_by_id(self, track_id: str) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ ID"""
        try:
            self.log(f"üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ...")
            track_meta = self.client.get_track_meta(track_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ –¥–ª—è –ø–∞–ø–∫–∏
            album_meta = track_meta.get('album', {})
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
            if album_meta:
                folder = self.get_album_folder(album_meta)
            else:
                folder = Path(self.settings.get('download_folder', './downloads'))
            
            folder.mkdir(parents=True, exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É
            cover_data = None
            if self.settings.get('download_cover', True) and album_meta:
                cover_data = self.download_cover(album_meta.get('image', {}).get('large'))
            
            self.download_track(track_meta, folder, album_meta, cover_data)
            
            self.update_progress(100)
            self.log(f"\n‚úì –¢—Ä–µ–∫ —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            self.log(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {str(e)}")
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞")
            return False
    
    def download_playlist(self, playlist_id: str) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        try:
            self.log(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ...")
            playlist_meta = self.client.get_playlist_meta(playlist_id)
            
            playlist_title = playlist_meta['name']
            tracks_count = len(playlist_meta['tracks']['items'])
            
            self.log(f"üìã –ü–ª–µ–π–ª–∏—Å—Ç: {playlist_title}")
            self.log(f"üìã –¢—Ä–µ–∫–æ–≤: {tracks_count}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
            base_folder = Path(self.settings.get('download_folder', './downloads'))
            playlist_folder = base_folder / sanitize_filename(playlist_title)
            playlist_folder.mkdir(parents=True, exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏
            downloaded_files = []
            for idx, track in enumerate(playlist_meta['tracks']['items'], 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É/–æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç—Ä–µ–∫–æ–º
                self.check_pause()
                
                self.log(f"\nüéµ [{idx}/{tracks_count}] {track.get('title', 'Unknown')}")
                
                progress = int((idx - 1) / tracks_count * 100)
                self.update_progress(progress)
                
                # –î–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø–∞–ø–∫—É
                album_meta = track.get('album', {})
                cover_data = None
                if self.settings.get('download_cover', True) and album_meta:
                    cover_data = self.download_cover(album_meta.get('image', {}).get('large'))
                
                track_file = self.download_track(track, playlist_folder, album_meta, cover_data)
                if track_file:
                    downloaded_files.append(track_file)
            
            # –°–æ–∑–¥–∞—ë–º M3U –ø–ª–µ–π–ª–∏—Å—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if downloaded_files:
                self.create_m3u_playlist(
                    playlist_folder,
                    downloaded_files,
                    playlist_title
                )
            
            self.update_progress(100)
            self.log(f"\n‚úì –ü–ª–µ–π–ª–∏—Å—Ç —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            self.log(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {str(e)}")
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
            return False
    
    def download_track(self, track_meta: Dict, folder: Path, 
                      album_meta: Dict = None, cover_data: bytes = None) -> Optional[Path]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
        
        Returns:
            Path –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            track_id = track_meta['id']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality_index = self.settings.get('quality_index', 1)
            format_id = self.QUALITY_MAP.get(quality_index, 6)
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            url_data = self.client.get_track_url(track_id, format_id)
            download_url = url_data.get('url')
            
            if not download_url:
                self.log("  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_ext = '.flac' if format_id in [6, 7, 27] else '.mp3'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = self.get_track_filename(track_meta, album_meta) + file_ext
            file_path = folder / filename
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            self.log(f"  ‚¨á –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
            self.download_file(download_url, file_path)
            self.log(f"  ‚úì –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            self.log(f"  üìù –ó–∞–ø–∏—Å—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –∏ –∞–ª—å–±–æ–º–∞
            combined_meta = {**track_meta}
            if album_meta:
                combined_meta['album'] = album_meta
            
            # –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤
            lyrics_plain = None
            lyrics_lrc = None
            
            if self.settings.get('lyrics_enable', True):
                self.log(f"  üîç –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–Ω–∏...")
                
                artist = track_meta.get('performer', {}).get('name') or \
                        album_meta.get('artist', {}).get('name', '') if album_meta else ''
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å version –µ—Å–ª–∏ –µ—Å—Ç—å)
                title = track_meta.get('title', '')
                version = track_meta.get('version')
                if version:
                    title = f"{title} ({version})"
                
                album_title = album_meta.get('title', '') if album_meta else ''
                duration = track_meta.get('duration')
                
                if artist and title:
                    lyrics_plain, lyrics_lrc = self.lyrics_searcher.search_lyrics(
                        artist, title, album_title, duration
                    )
                    
                    if lyrics_lrc or lyrics_plain:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —Ç–µ–∫—Å—Ç–æ–≤
                        if self.settings.get('lyrics_save_lrc', True) and lyrics_lrc:
                            lrc_path = file_path.with_suffix('.lrc')
                            lrc_path.write_text(lyrics_lrc, encoding='utf-8')
                            self.log(f"  ‚úì LRC —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                        
                        if self.settings.get('lyrics_save_srt', False) and lyrics_lrc:
                            srt_text = self.lyrics_searcher.lrc_to_srt(lyrics_lrc)
                            srt_path = file_path.with_suffix('.srt')
                            srt_path.write_text(srt_text, encoding='utf-8')
                            self.log(f"  ‚úì SRT —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                        
                        if self.settings.get('lyrics_save_txt', False) and lyrics_plain:
                            txt_path = file_path.with_suffix('.txt')
                            txt_path.write_text(lyrics_plain, encoding='utf-8')
                            self.log(f"  ‚úì TXT —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            self.metadata_writer.embed_metadata(
                file_path, combined_meta, lyrics_plain, lyrics_lrc, cover_data
            )
            
            return file_path  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        except Exception as e:
            self.log(f"  ‚úó –û—à–∏–±–∫–∞: {str(e)}")
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞")
            return None
    
    def download_file(self, url: str, path: Path):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        response = self.session.get(url, stream=True)
        response.raise_for_status()
        
        total_size = int(response.headers.get('content-length', 0))
        
        with open(path, 'wb') as f:
            if total_size == 0:
                f.write(response.content)
            else:
                downloaded = 0
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
    
    def download_cover(self, cover_url: str) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏"""
        if not cover_url:
            return None
        
        try:
            # Qobuz –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —à–∞–±–ª–æ–Ω—ã —Ä–∞–∑–º–µ—Ä–æ–≤
            if '{size}' in cover_url:
                cover_url = cover_url.replace('{size}', '600')
            
            response = self.session.get(cover_url, timeout=10)
            response.raise_for_status()
            return response.content
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
            return None
    
    def download_artist(self, artist_id: str) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ–π –¥–∏—Å–∫–æ–≥—Ä–∞—Ñ–∏–∏ –∞—Ä—Ç–∏—Å—Ç–∞
        
        Args:
            artist_id: ID –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–∞ Qobuz
            
        Returns:
            True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–ª—å–±–æ–º —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            self.log(f"üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä—Ç–∏—Å—Ç–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ç–∏—Å—Ç–µ
            artist_info = self.client.api_call("artist/get", id=artist_id)
            artist_name = artist_info.get('name', 'Unknown Artist')
            
            self.log(f"üé§ –ê—Ä—Ç–∏—Å—Ç: {artist_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–∫–æ–≥—Ä–∞—Ñ–∏—é
            self.log(f"üìÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Å–∫–æ–≥—Ä–∞—Ñ–∏–∏...")
            albums_data = self.client.api_call("artist/get", id=artist_id, extra="albums", limit=500)
            
            albums_list = albums_data.get('albums', {}).get('items', [])
            
            if not albums_list:
                self.log(f"‚úó –£ –∞—Ä—Ç–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–ª—å–±–æ–º–æ–≤")
                return False
            
            total_albums = len(albums_list)
            self.log(f"üìö –ù–∞–π–¥–µ–Ω–æ –∞–ª—å–±–æ–º–æ–≤: {total_albums}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–¥–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞)
            unique_albums = {}
            for album in albums_list:
                title = album.get('title', '')
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≥–æ–¥–∞ –∫–∞–∫ –∫–ª—é—á
                year = album.get('release_date_original', '')[:4] if album.get('release_date_original') else ''
                key = f"{title}_{year}"
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                if key not in unique_albums:
                    unique_albums[key] = album
                else:
                    current_quality = unique_albums[key].get('maximum_bit_depth', 0)
                    new_quality = album.get('maximum_bit_depth', 0)
                    if new_quality > current_quality:
                        unique_albums[key] = album
            
            albums_to_download = list(unique_albums.values())
            self.log(f"üì• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(albums_to_download)}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–ª—å–±–æ–º
            success_count = 0
            for i, album in enumerate(albums_to_download, 1):
                album_id = album.get('id')
                album_title = album.get('title', 'Unknown')
                
                self.log(f"\n[{i}/{len(albums_to_download)}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {album_title}")
                
                try:
                    if self.download_album(album_id):
                        success_count += 1
                        self.log(f"‚úì –ê–ª—å–±–æ–º {i}/{len(albums_to_download)} –∑–∞–≤–µ—Ä—à—ë–Ω")
                    else:
                        self.log(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞–ª—å–±–æ–º {i}/{len(albums_to_download)}")
                except Exception as e:
                    self.log(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞: {e}")
                    logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞–ª—å–±–æ–º–∞ {album_title}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int((i / len(albums_to_download)) * 100)
                self.update_progress(progress)
            
            self.log(f"\n{'='*60}")
            self.log(f"‚úì –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            self.log(f"üìä –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(albums_to_download)} –∞–ª—å–±–æ–º–æ–≤")
            
            return success_count > 0
            
        except Exception as e:
            self.log(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–∞: {str(e)}")
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–∞")
            return False
    
    def get_album_folder(self, album_meta: Dict) -> Path:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –∞–ª—å–±–æ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        base_folder = Path(self.settings.get('download_folder', './downloads'))
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        template_data = {
            'artist': album_meta.get('artist', {}).get('name', 'Unknown Artist'),
            'album': album_meta.get('title', 'Unknown Album'),
            'year': album_meta.get('release_date_original', '')[:4] if album_meta.get('release_date_original') else '',
            'label': album_meta.get('label', {}).get('name', ''),
            'upc': album_meta.get('upc', ''),
        }
        
        folder_template = self.settings.get('folder_template', '{artist} - {album} ({year})')
        folder_name = self.formatter.format(folder_template, **template_data)
        folder_name = sanitize_filename(folder_name)
        
        return base_folder / folder_name
    
    def get_track_filename(self, track_meta: Dict, album_meta: Dict = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ç—Ä–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (—Å version –µ—Å–ª–∏ –µ—Å—Ç—å)
        title = track_meta.get('title', 'Unknown')
        version = track_meta.get('version')
        if version:
            title = f"{title} ({version})"
        
        template_data = {
            'artist': track_meta.get('performer', {}).get('name') or \
                     album_meta.get('artist', {}).get('name', 'Unknown') if album_meta else 'Unknown',
            'title': title,
            'tracknumber': str(track_meta.get('track_number', 0)).zfill(2),
            'album': album_meta.get('title', '') if album_meta else '',
            'year': album_meta.get('release_date_original', '')[:4] if album_meta and album_meta.get('release_date_original') else '',
            'genre': album_meta.get('genre', {}).get('name', '') if album_meta else '',
            'label': album_meta.get('label', {}).get('name', '') if album_meta else '',
            'isrc': track_meta.get('isrc', ''),
            'upc': album_meta.get('upc', '') if album_meta else '',
        }
        
        file_template = self.settings.get('file_template', '{tracknumber}. {artist} - {title}')
        filename = self.formatter.format(file_template, **template_data)
        filename = sanitize_filename(filename)
        
        return filename
