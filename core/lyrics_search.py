"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω
–°—Ç—Ä–æ–≥–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º: –ø–æ–∏—Å–∫ ‚Üí —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Üí –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã ‚Üí –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
"""
import re
import requests
import logging
from typing import Optional, Tuple, List, Dict

try:
    from rapidfuzz import fuzz
    FUZZ_AVAILABLE = True
except ImportError:
    FUZZ_AVAILABLE = False
    logging.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ rapidfuzz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –±—É–¥–µ—Ç –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: pip install rapidfuzz")


logger = logging.getLogger(__name__)


class LyricsSearcher:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    –∏ —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π.
    """
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Qobuz GUI Downloader v1.0.5 (https://github.com/Basil-AS/Qobuz_Gui_Downloader)'
        })
    
    def _is_instrumental_text(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ä–∫–µ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç - —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ —Ç–∏–ø–∞ "[Instrumental]".
        """
        if not text or not text.strip():
            return False
        
        # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∫–æ–¥—ã –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        plain_text = re.sub(r'\[.*?\]', '', text).strip().lower()
        if not plain_text:
            return False
        
        # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        if len(plain_text) < 30 and any(m in plain_text for m in ['instrumental', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª']):
            return True
        
        return False
    
    def _get_clean_title(self, title: str) -> str:
        """
        –£–±–∏—Ä–∞–µ—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–º–∏–∫—Å—ã, –≤–µ—Ä—Å–∏–∏ –∏ –ø—Ä–æ—á–µ–µ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        –£–¥–∞–ª—è–µ—Ç –≤—Å—ë –≤ —Å–∫–æ–±–∫–∞—Ö () –∏ [] –∏ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è.
        """
        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç—Ä–µ–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ (01., 1., 001. –∏ —Ç.–¥.)
        clean_title = re.sub(r'^\d+\.\s*', '', title)
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ —Å–∫–æ–±–∫–∞—Ö, –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∏ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö, –∞ —Ç–∞–∫–∂–µ –∫–∞–≤—ã—á–∫–∏-—ë–ª–æ—á–∫–∏
        clean_title = re.sub(r"\s*\(.*?\)\s*|\s*\[.*?\]\s*|\s*'.*?'\s*|\s*\".*?\"\s*|\s*¬´.*?¬ª\s*", '', clean_title)
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
        clean_title = re.sub(r'_+', ' ', clean_title)
        # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ "–ª–∏—à–Ω–∏–µ" —Å–ª–æ–≤–∞
        clean_title = re.sub(r'\s*-\s*(live|remix|reprise|acoustic|version)\s*', '', clean_title, flags=re.IGNORECASE)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        clean_title = re.sub(r'\s+', ' ', clean_title)
        clean_title = clean_title.strip(' _-\t\n\r').strip()
        return clean_title.strip().lower()
    
    def search_lyrics(self, artist: str, title: str, album: str = None, duration: int = None) -> Tuple[Optional[str], Optional[str]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º "–ü–æ–∏—Å–∫ ‚Üí –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Üí –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ".
        
        Returns:
            Tuple[plain_text, lrc_text] - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ LRC (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω synced)
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è: {artist} - {title} (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}—Å)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        instrumental_keywords = ['instrumental', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª']
        title_lower = title.lower()
        if any(keyword in title_lower for keyword in instrumental_keywords):
            if not any(word in title_lower for word in ['feat', 'vocals', 'with', 'sung']):
                logger.info("üéº –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤")
                return None, None
        
        # --- –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é /api/search ---
        try:
            url = "https://lrclib.net/api/search"
            params = {'track_name': title, 'artist_name': artist}
            if album:
                params['album_name'] = album
            
            response = self.session.get(url, params=params, timeout=15)
            response.raise_for_status()
            candidates = response.json()
            
            if not candidates:
                logger.warning("‚ùå LRCLib: –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return None, None
        except (requests.RequestException, ValueError) as e:
            logger.error(f"‚ùå LRCLib: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /api/search: {e}")
            return None, None
        
        logger.info(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä–æ–≥—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é...")
        
        # --- –®–∞–≥ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ---
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        best_synced_match = self._find_best_match(candidates, artist, title, duration or 0, require_synced=True)
        if best_synced_match:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç —Å –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ú —Ç–µ–∫—Å—Ç–æ–º")
            synced_lyrics = best_synced_match.get('syncedLyrics')
            is_instr = self._is_instrumental_text(synced_lyrics) or best_synced_match.get('instrumental')
            if is_instr:
                logger.info("üéº –¢—Ä–µ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ–¨–ù–´–ô")
                return None, None
            plain_lyrics = self._lrc_to_plain(synced_lyrics)
            return plain_lyrics, synced_lyrics
        
        # –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        logger.info("‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º...")
        best_plain_match = self._find_best_match(candidates, artist, title, duration or 0, require_synced=False)
        if best_plain_match:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç —Å –û–ë–´–ß–ù–´–ú —Ç–µ–∫—Å—Ç–æ–º")
            plain_lyrics = best_plain_match.get('plainLyrics')
            is_instr = self._is_instrumental_text(plain_lyrics) or best_plain_match.get('instrumental')
            if is_instr:
                logger.info("üéº –¢—Ä–µ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ–¨–ù–´–ô")
                return None, None
            return plain_lyrics, None
        
        logger.warning(f"‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è: {artist} - {title}")
        return None, None
    
    def _find_best_match(self, candidates: List[Dict], target_artist: str, target_title: str, target_duration: int, require_synced: bool) -> Optional[Dict]:
        """
        –ò—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–∞–≤–∏–ª.
        
        Args:
            candidates: —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ç lrclib API
            target_artist: —Ü–µ–ª–µ–≤–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            target_title: —Ü–µ–ª–µ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            target_duration: —Ü–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            require_synced: —Ç—Ä–µ–±–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ syncedLyrics
        
        Returns:
            –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ None
        """
        best_candidate = None
        highest_score = float('-inf')  # –ú–∏–Ω—É—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –ª—é–±–æ–π score –±—ã–ª –ª—É—á—à–µ
        
        MIN_ARTIST_SCORE = 90  # –¢—Ä–µ–±—É–µ–º –ø–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        # –ü–æ–ª—É—á–∞–µ–º "—á–∏—Å—Ç–æ–µ" –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        target_title_clean = self._get_clean_title(target_title)
        
        for item in candidates:
            # --- –ü—Ä–∞–≤–∏–ª–æ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ–∫—Å—Ç–∞ ---
            if require_synced:
                if not item.get('syncedLyrics'):
                    continue
            else:
                if not item.get('plainLyrics') and not item.get('syncedLyrics'):
                    continue
            
            # --- –ü—Ä–∞–≤–∏–ª–æ 2: –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ---
            item_title = item.get('trackName', '')
            item_artist = item.get('artistName', '')
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            if FUZZ_AVAILABLE:
                artist_score = fuzz.ratio(target_artist.lower(), item_artist.lower())
                if artist_score < MIN_ARTIST_SCORE:
                    logger.debug(f"–û—Ç–±—Ä–æ—à–µ–Ω (–∞—Ä—Ç–∏—Å—Ç): '{item_artist}' vs '{target_artist}' (—Å—Ö–æ–∂–µ—Å—Ç—å {artist_score:.0f}%)")
                    continue
            else:  # –ï—Å–ª–∏ fuzz –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                if target_artist.lower() not in item_artist.lower() and item_artist.lower() not in target_artist.lower():
                    logger.debug(f"–û—Ç–±—Ä–æ—à–µ–Ω (–∞—Ä—Ç–∏—Å—Ç): '{item_artist}' vs '{target_artist}'")
                    continue
                artist_score = 95  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è. –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢!
            item_title_clean = self._get_clean_title(item_title)
            
            # –ú—ã —Ç—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã "—á–∏—Å—Ç—ã–µ" –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–ª–∏ –Ω–∞ 100%
            if item_title_clean != target_title_clean:
                logger.debug(f"–û—Ç–±—Ä–æ—à–µ–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ): '{item_title_clean}' vs '{target_title_clean}'")
                continue
            
            # --- –ü—Ä–∞–≤–∏–ª–æ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
            item_duration = item.get('duration', 0)
            duration_diff = abs(target_duration - item_duration)
            if target_duration > 0 and duration_diff > 100:  # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–æ 100 —Å–µ–∫—É–Ω–¥ (–∞–ª—å–±–æ–º–Ω—ã–µ/—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
                logger.debug(f"–û—Ç–±—Ä–æ—à–µ–Ω (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å): {item_duration}—Å vs {target_duration}—Å (—Ä–∞–∑–Ω–∏—Ü–∞ {duration_diff:.1f}—Å)")
                continue
            
            # --- –û—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ---
            # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∏–∑ –ø—Ä–æ—à–µ–¥—à–∏—Ö.
            # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É –ª—É—á—à–µ.
            # –ú–µ–Ω—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ.
            # –ù–∞–ª–∏—á–∏–µ synced-—Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ.
            score = artist_score - (duration_diff * 10)  # –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if item.get('syncedLyrics'):
                score += 100  # –ë–æ–Ω—É—Å –∑–∞ synced-—Ç–µ–∫—Å—Ç
            
            if score > highest_score:
                highest_score = score
                best_candidate = item
        
        if best_candidate:
            logger.info(f"‚úì –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: '{best_candidate['artistName']} - {best_candidate['trackName']}' (ID: {best_candidate['id']})")
        
        return best_candidate
    
    def _lrc_to_plain(self, lyrics_lrc: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ LRC –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–∫–æ–¥–æ–≤)"""
        if not lyrics_lrc:
            return ""
        text_no_timestamps = re.sub(r'\[\d{2}:\d{2}\.\d{2,3}\]', '', lyrics_lrc)
        text_no_karaoke = re.sub(r'<\d{2}:\d{2}\.\d{2,3}>', '', text_no_timestamps)
        return "\n".join(line.strip() for line in text_no_karaoke.splitlines() if line.strip())
    
    def lrc_to_srt(self, lyrics_lrc: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è LRC –≤ SubRip (.srt) –¥–ª—è VLC
        
        Args:
            lyrics_lrc: —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ LRC
        
        Returns:
            —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ SRT
        """
        entries = []
        time_pattern = re.compile(r"\[(\d{1,2}):(\d{2})(?:[\.:](\d{1,2}))?\]")
        
        for raw_line in lyrics_lrc.splitlines():
            if not raw_line.strip():
                continue
            times = list(time_pattern.finditer(raw_line))
            if not times:
                continue
            
            # –¢–µ–∫—Å—Ç –±–µ–∑ —Ç–∞–π–º–∫–æ–¥–æ–≤
            text = time_pattern.sub("", raw_line).strip()
            if not text:
                text = "‚ô™"
            
            for m in times:
                mm = int(m.group(1) or 0)
                ss = int(m.group(2) or 0)
                ff = int(m.group(3) or 0)
                # ff —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ —Å–æ—Ç—ã–µ –¥–æ–ª–∏ —Å–µ–∫—É–Ω–¥—ã
                ms = ff * 10 if ff < 10 else ff if ff < 100 else 0
                total_ms = (mm * 60 + ss) * 1000 + ms
                entries.append((total_ms, text))
        
        if not entries:
            return ""
        
        entries.sort(key=lambda x: x[0])
        
        def fmt_srt_time(ms: int) -> str:
            if ms < 0:
                ms = 0
            h = ms // 3600000
            ms %= 3600000
            m = ms // 60000
            ms %= 60000
            s = ms // 1000
            ms %= 1000
            return f"{h:02d}:{m:02d}:{s:02d},{ms:03d}"
        
        srt_lines = []
        for idx, (start_ms, text) in enumerate(entries, start=1):
            if idx < len(entries):
                # –ö–æ–Ω–µ—Ü - –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã —Ä–∞–Ω—å—à–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞
                end_ms = max(start_ms + 500, entries[idx][0] - 500)
            else:
                end_ms = start_ms + 4000
            
            srt_lines.append(str(idx))
            srt_lines.append(f"{fmt_srt_time(start_ms)} --> {fmt_srt_time(end_ms)}")
            srt_lines.append(text)
            srt_lines.append("")
        
        return "\n".join(srt_lines)
