"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω
–î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: /api/search (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã) ‚Üí —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è synced/plain
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã ‚Üí –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
"""
import re
import requests
import logging
from typing import Optional, Tuple


logger = logging.getLogger(__name__)


class LyricsSearcher:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Qobuz GUI Downloader v1.0.0 (https://github.com/Basil-AS/Qobuz_Gui_Downloader)'
        })
    
    def _is_instrumental_text(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ä–∫–µ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç - —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ —Ç–∏–ø–∞ "[Instrumental]".
        """
        if not text or not text.strip():
            return False
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã –≤ –ü–û–õ–ù–û–ú —Ç–µ–∫—Å—Ç–µ (–≤–∫–ª—é—á–∞—è —Å–∫–æ–±–∫–∏)
        instrumental_markers_full = [
            r'^\s*\[instrumental\]\s*$',
            r'^\s*\[–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª\]\s*$',
            r'\[au:\s*instrumental\]'
        ]
        
        for marker in instrumental_markers_full:
            if re.search(marker, text, re.IGNORECASE | re.MULTILINE):
                return True
        
        # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∫–æ–¥—ã LRC, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –º–µ—à–∞–ª–∏ –ø–æ–∏—Å–∫—É
        plain_text = re.sub(r'\[\d{2}:\d{2}\.\d{2,3}\]', '', text).strip()
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å (—Ç–æ–ª—å–∫–æ —Ç–∞–π–º–∫–æ–¥—ã)
        if not plain_text:
            return False  # –≠—Ç–æ –Ω–µ "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª", –∞ –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π LRC
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ - –º–∞—Ä–∫–µ—Ä—ã –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(plain_text) > 30:
            return False
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫, –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–∞—Ä–∫–µ—Ä
        lines = [line.strip() for line in plain_text.splitlines() if line.strip()]
        if len(lines) > 3:
            return False
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ (–±–µ–∑ —Å–∫–æ–±–æ–∫) - —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
        instrumental_markers = [
            r'^\s*instrumental\s*$',
            r'^\s*–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª\s*$',
            r'^\s*instrumental\s+version\s*$'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –æ—á–∏—â–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        for marker in instrumental_markers:
            if re.search(marker, plain_text, re.IGNORECASE):
                return True
        
        return False
    
    def search_lyrics(self, artist: str, title: str, album: str = None, duration: int = None) -> Tuple[Optional[str], Optional[str]]:
        """
        –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤: —Å–Ω–∞—á–∞–ª–∞ synced, –ø–æ—Ç–æ–º plain
        
        Returns:
            Tuple[plain_text, lrc_text] - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ LRC (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω synced)
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞: {artist} - {title}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        instrumental_keywords = ['instrumental', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª', 'piano version', 'orchestral', 'acoustic']
        title_lower = title.lower()
        if any(keyword in title_lower for keyword in instrumental_keywords):
            # –î–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–µ –∏—â–µ–º —Ç–µ–∫—Å—Ç—ã
            if not any(word in title_lower for word in ['feat', 'vocals', 'with', 'sung']):
                logger.info("üéº –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤")
                return None, None
        
        # –®–∞–≥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º /api/search –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        search_results = self._search_lrclib_all(artist, title, album, duration)
        
        if search_results:
            logger.info(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(search_results)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –°–¢–†–û–ì–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ò –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            filtered_results = self._filter_results_strict(search_results, artist, title)
            
            if not filtered_results:
                logger.warning("‚ö† –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
                logger.info("üí° –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–µ—Å–µ–Ω")
                return None, None
            
            logger.info(f"‚úì –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            for result in filtered_results:
                synced = result.get('syncedLyrics')
                if synced and not result.get('instrumental'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–ª—É—à–∫–æ–π
                    if self._is_instrumental_text(synced):
                        logger.info("üéº –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ [Instrumental] –≤ LRC - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º–∫–æ–¥–æ–≤
                    if re.search(r'\[\d{2}:\d{2}\.\d{2,3}\]', synced):
                        plain_text, lrc_text = self._process_lyrics(synced)
                        if lrc_text:
                            logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ç–µ–∫—Å—Ç (lrclib.net)")
                            return plain_text, lrc_text
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ synced –Ω–∏–≥–¥–µ –Ω–µ—Ç)
            for result in filtered_results:
                plain = result.get('plainLyrics')
                if plain and not result.get('instrumental'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–ª—É—à–∫–æ–π
                    if self._is_instrumental_text(plain):
                        logger.info("üéº –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ [Instrumental] - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –û–ë–´–ß–ù–´–ô —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ç–∞–π–º–∫–æ–¥–æ–≤, lrclib.net)")
                    return plain, None
        
        # –®–∞–≥ 2: –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ syncedlyrics (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)
        logger.info(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ syncedlyrics...")
        result = self._search_syncedlyrics(artist, title)
        if result:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if self._is_instrumental_text(result):
                logger.info("üéº –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ [Instrumental] - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None, None
            
            plain_text, lrc_text = self._process_lyrics(result)
            if lrc_text:
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ç–µ–∫—Å—Ç (syncedlyrics)")
                return plain_text, lrc_text
            elif plain_text:
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –û–ë–´–ß–ù–´–ô —Ç–µ–∫—Å—Ç (syncedlyrics)")
                return plain_text, None
        
        logger.warning(f"‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {artist} - {title}")
        logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Ä–µ–≥–∏—Å—Ç—Ä)")
        return None, None
    
    def _filter_results_strict(self, results, target_artist: str, target_title: str):
        """
        –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –°–¢–†–û–ì–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –ò –Ω–∞–∑–≤–∞–Ω–∏—é.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–∞ –ø–æ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        target_artist_norm = target_artist.lower().strip()
        target_title_norm = target_title.lower().strip()
        target_title_base = re.sub(r'\s*\([^)]*\)\s*', '', target_title_norm).strip()
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏)
        target_artist_variants = [target_artist_norm]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä: –ó–µ–º—Ñ–∏—Ä–∞ / Zemfira
        if any(ord(c) > 127 for c in target_artist_norm):
            # –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
            target_artist_variants.append(target_artist_norm)
        
        filtered = []
        for result in results:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            result_artist = result.get('artistName', '').lower().strip()
            
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            artist_match = False
            for variant in target_artist_variants:
                if (result_artist == variant or
                    result_artist in variant or
                    variant in result_artist or
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö 4 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
                    (len(result_artist) >= 4 and len(variant) >= 4 and 
                     result_artist[:4] == variant[:4])):
                    artist_match = True
                    break
            
            if not artist_match:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è - –¢–û–õ–¨–ö–û —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            result_title = result.get('trackName', '').lower().strip()
            result_title_base = re.sub(r'\s*\([^)]*\)\s*', '', result_title).strip()
            
            title_match = (
                result_title == target_title_norm or
                result_title_base == target_title_base
            )
            
            if title_match:
                filtered.append(result)
                logger.debug(f"  ‚úì –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{result.get('artistName')}' - '{result.get('trackName')}'")
        
        return filtered
    
    def _filter_results_by_title(self, results, target_title: str):
        """
        –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –°–¢–†–û–ì–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–µ—Å–µ–Ω.
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–ª–µ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        target_normalized = target_title.lower().strip()
        # –£–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–∏
        target_base = re.sub(r'\s*\([^)]*\)\s*', '', target_normalized).strip()
        
        filtered = []
        for result in results:
            track_name = result.get('trackName', '').lower().strip()
            track_base = re.sub(r'\s*\([^)]*\)\s*', '', track_name).strip()
            
            # –¢–û–õ–¨–ö–û —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ù–∏–∫–∞–∫–∏—Ö "startswith" –∏–ª–∏ "contains"
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            if track_name == target_normalized:
                filtered.append(result)
                continue
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–∏ (–±–µ–∑ —Å–∫–æ–±–æ–∫)
            if track_base == target_base:
                filtered.append(result)
                continue
        
        if filtered:
            logger.debug(f"‚úì –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {len(results)} ‚Üí {len(filtered)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            logger.debug(f"‚úó –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è '{target_title}'")
        
        # –í–ê–ñ–ù–û: –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç–æ–π!
        # –õ—É—á—à–µ –Ω–µ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç, —á–µ–º –Ω–∞–π—Ç–∏ —á—É–∂–æ–π
        return filtered
    
    def _search_lrclib_all(self, artist: str, title: str, album: str = None, duration: int = None):
        """
        –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ lrclib.net: /api/search ‚Üí –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            artist: –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            album: –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            List[dict] - –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞
        """
        results = []
        
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–µ (GET /api/get)
            if duration:
                url = "https://lrclib.net/api/get"
                params = {
                    'artist_name': artist,
                    'track_name': title,
                }
                if album:
                    params['album_name'] = album
                if duration:
                    params['duration'] = int(duration)
                
                response = self.session.get(url, params=params, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data.get('syncedLyrics') or data.get('plainLyrics'):
                        results.append(data)
                        logger.debug(f"‚úì –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ (GET /api/get): –Ω–∞–π–¥–µ–Ω–æ")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ (GET /api/search) - –æ—Å–Ω–æ–≤–Ω–æ–π
            url = "https://lrclib.net/api/search"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            search_queries = []
            
            # 1. –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å: artist + title + album
            if album:
                search_queries.append(f"{artist} {title} {album}")
            
            # 2. –ë–∞–∑–æ–≤—ã–π: artist + title
            search_queries.append(f"{artist} {title}")
            
            # 3. –¢–æ–ª—å–∫–æ title (–¥–ª—è –ø–µ—Å–µ–Ω —Å —Ä–∞–∑–Ω—ã–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
            search_queries.append(title)
            
            for query in search_queries:
                try:
                    params = {'q': query}
                    response = self.session.get(url, params=params, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        if isinstance(data, list) and len(data) > 0:
                            logger.debug(f"‚úì –ü–æ–∏—Å–∫ '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ id)
                            existing_ids = {r.get('id') for r in results}
                            for item in data:
                                if item.get('id') not in existing_ids:
                                    results.append(item)
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")
                    continue
        
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ lrclib.net: {e}")
        
        return results
    
    def _search_syncedlyrics(self, artist: str, title: str) -> Optional[str]:
        """
        –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É syncedlyrics (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç synced, fallback –Ω–∞ plain)
        
        Args:
            artist: –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            title: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        
        Returns:
            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            import syncedlyrics
            
            search_query = f"{artist} - {title}"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ synced
            result = syncedlyrics.search(search_query, allow_plain_format=False)
            if result:
                logger.debug("‚úì syncedlyrics: –Ω–∞–π–¥–µ–Ω –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ç–µ–∫—Å—Ç")
                return result
            
            # –ï—Å–ª–∏ synced –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º plain
            result = syncedlyrics.search(search_query, allow_plain_format=True)
            if result:
                logger.debug("‚úì syncedlyrics: –Ω–∞–π–¥–µ–Ω –û–ë–´–ß–ù–´–ô —Ç–µ–∫—Å—Ç")
                return result
            
            logger.debug("syncedlyrics: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        except ImportError:
            logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ syncedlyrics –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ syncedlyrics: {e}")
        
        return None
    
    def _process_lyrics(self, lyrics_raw: str) -> Tuple[Optional[str], Optional[str]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        
        Returns:
            Tuple[plain_text, lrc_text]
            - –ï—Å–ª–∏ LRC: (plain_version, lrc_version)
            - –ï—Å–ª–∏ plain: (plain_text, None)
        """
        if not lyrics_raw:
            return None, None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ LRC —Ç–∞–π–º–∫–æ–¥—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 3 —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏)
        lrc_lines = [line for line in lyrics_raw.splitlines() 
                     if re.search(r"\[\s*\d{1,2}:\d{2}(?:[\.:]\d{1,2})?\s*\]", line)]
        
        if len(lrc_lines) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏
            lrc_text = self._normalize_lrc(lyrics_raw)
            plain_text = self._lrc_to_plain(lrc_text)
            logger.debug(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω LRC —Ç–µ–∫—Å—Ç ({len(lrc_lines)} —Å—Ç—Ä–æ–∫ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏)")
            return plain_text, lrc_text
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–∞–π–º–∫–æ–¥–æ–≤
            plain_text = lyrics_raw.strip()
            logger.debug(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ç–∞–π–º–∫–æ–¥–æ–≤)")
            return plain_text, None
    
    def _normalize_lrc(self, lyrics_lrc: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è LRC: –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∞–π–º–∫–æ–¥–æ–≤ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É [mm:ss.xx]"""
        lines = lyrics_lrc.splitlines()
        normalized_lines = []
        
        for line in lines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–π–º–∫–æ–¥–∞
            if re.search(r"\[\s*\d{1,2}:\d{2}(?:[\.:]\d{1,2})?\s*\]", line):
                # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∞–π–º–∫–æ–¥—ã –∫ —Ñ–æ—Ä–º–∞—Ç—É [mm:ss.xx]
                def repl(m):
                    ts = m.group(0).replace('[', '').replace(']', '').strip()
                    parts = re.split(r"[:\.]", ts)
                    mm = int(parts[0]) if parts and parts[0].isdigit() else 0
                    ss = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 0
                    ff = 0
                    if len(parts) > 2 and parts[2].isdigit():
                        ff = int(parts[2])
                        ff = max(0, min(ff, 99))
                    return f"[{mm:02d}:{ss:02d}.{ff:02d}]"
                
                line = re.sub(r"\[\s*\d{1,2}:\d{2}(?:[\.:]\d{1,2})?\s*\]", repl, line, count=1)
                normalized_lines.append(line)
            else:
                normalized_lines.append(line)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        while normalized_lines and not normalized_lines[0].strip():
            normalized_lines.pop(0)
        while normalized_lines and not normalized_lines[-1].strip():
            normalized_lines.pop()
        
        return "\n".join(normalized_lines)
    
    def _lrc_to_plain(self, lyrics_lrc: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ LRC –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–π–º–∫–æ–¥–æ–≤)"""
        plain_lines = []
        for line in lyrics_lrc.splitlines():
            text = re.sub(r"^\s*\[[^\]]+\]\s*", "", line)
            plain_lines.append(text)
        return "\n".join(plain_lines)
    
    def lrc_to_srt(self, lyrics_lrc: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è LRC –≤ SubRip (.srt) –¥–ª—è VLC
        
        Args:
            lyrics_lrc: —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ LRC
        
        Returns:
            —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ SRT
        """
        entries = []
        time_pattern = re.compile(r"\[(\d{1,2}):(\d{2})(?:[\.:](\d{1,2}))?\]")
        
        for raw_line in lyrics_lrc.splitlines():
            if not raw_line.strip():
                continue
            times = list(time_pattern.finditer(raw_line))
            if not times:
                continue
            
            # –¢–µ–∫—Å—Ç –±–µ–∑ —Ç–∞–π–º–∫–æ–¥–æ–≤
            text = time_pattern.sub("", raw_line).strip()
            if not text:
                text = "‚ô™"
            
            for m in times:
                mm = int(m.group(1) or 0)
                ss = int(m.group(2) or 0)
                ff = int(m.group(3) or 0)
                # ff —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ —Å–æ—Ç—ã–µ –¥–æ–ª–∏ —Å–µ–∫—É–Ω–¥—ã
                ms = ff * 10 if ff < 10 else ff if ff < 100 else 0
                total_ms = (mm * 60 + ss) * 1000 + ms
                entries.append((total_ms, text))
        
        if not entries:
            return ""
        
        entries.sort(key=lambda x: x[0])
        
        def fmt_srt_time(ms: int) -> str:
            if ms < 0:
                ms = 0
            h = ms // 3600000
            ms %= 3600000
            m = ms // 60000
            ms %= 60000
            s = ms // 1000
            ms %= 1000
            return f"{h:02d}:{m:02d}:{s:02d},{ms:03d}"
        
        srt_lines = []
        for idx, (start_ms, text) in enumerate(entries, start=1):
            if idx < len(entries):
                # –ö–æ–Ω–µ—Ü - –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã —Ä–∞–Ω—å—à–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞
                end_ms = max(start_ms + 500, entries[idx][0] - 500)
            else:
                end_ms = start_ms + 4000
            
            srt_lines.append(str(idx))
            srt_lines.append(f"{fmt_srt_time(start_ms)} --> {fmt_srt_time(end_ms)}")
            srt_lines.append(text)
            srt_lines.append("")
        
        return "\n".join(srt_lines)
